# Generated by Django 2.2 on 2021-09-15 14:13

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('django_celery_beat', '0012_periodictask_expire_seconds'),
    ]

    operations = [
        migrations.CreateModel(
            name='DayPartitionAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.CharField(help_text='任务id', max_length=64)),
                ('name', models.CharField(help_text='任务名称', max_length=64)),
                ('status', models.IntegerField(choices=[(-1, '运行失败'), (0, '运行成功'), (2, '运行中'), (3, '运行中')], default=0, help_text='任务运行状态')),
                ('tbname', models.CharField(help_text='查询表的名称', max_length=64)),
                ('dbname', models.CharField(help_text='查询表的库名称', max_length=32)),
                ('part_field', models.CharField(help_text='分区字段；按照分区查询数据，对应分区记录', max_length=32, null=True)),
                ('data', models.TextField(help_text='运行结果数据', null=True)),
                ('day_month', models.CharField(default='DAY', help_text='监控统计周期，DAY/MONTH/YEAR', max_length=32)),
                ('out_of_limits', models.IntegerField(default=0, help_text='超过预警的次数')),
                ('create_at', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True)),
                ('update_at', models.DateTimeField(auto_now=True, help_text='更新时间')),
            ],
            options={
                'db_table': 'day_partition_assert',
                'ordering': ['-create_at'],
            },
        ),
        migrations.CreateModel(
            name='MonitorResultCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='监控指标码', max_length=32)),
                ('code_desc', models.CharField(help_text='指标码描述', max_length=64, null=True)),
                ('create_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('update_at', models.DateTimeField(auto_now=True, help_text='创建时间')),
            ],
            options={
                'db_table': 'monitor_result_code',
                'ordering': ['-create_at'],
            },
        ),
        migrations.CreateModel(
            name='MonitorRules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rule_name', models.CharField(help_text='监控规则大分类，有效性，唯一性，准确性', max_length=32)),
                ('rule_desc', models.CharField(help_text='规则大类的说明', max_length=128)),
                ('term', models.CharField(help_text='具体的监控指标名称', max_length=32)),
                ('term_desc', models.CharField(help_text='指标说明', max_length=128, null=True)),
                ('logic_remark', models.CharField(help_text='监控规则详细说明', max_length=128, null=True)),
                ('term_level', models.CharField(default='table', help_text='监控规则级别，字段名/表，table代表表级,field字段级', max_length=32)),
                ('is_usedefine', models.IntegerField(default=0, help_text='是否是自定义,0:非自定义')),
                ('datatype_scope', models.CharField(help_text='规则适用字段类型', max_length=128, null=True)),
                ('stats', models.IntegerField(default=1, help_text='规则是否可用')),
                ('create_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('update_at', models.DateTimeField(auto_now=True, help_text='创建时间')),
            ],
            options={
                'db_table': 'monitor_rules',
                'ordering': ['-create_at'],
            },
        ),
        migrations.CreateModel(
            name='MonitorTableConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='任务名称', max_length=64, null=True, unique=True)),
                ('dbname', models.CharField(help_text='数据库', max_length=16)),
                ('tbname', models.CharField(help_text='表名', max_length=64)),
                ('field_name', models.CharField(help_text='监控的字段名，为空则是表级', max_length=32, null=True)),
                ('rule_logic_monitor', models.CharField(help_text='监控自定义json', max_length=128, null=True)),
                ('pre_table', models.CharField(help_text='数据表的上游表名', max_length=32, null=True)),
                ('part_field', models.CharField(help_text='分区字段,只提供一个,为空则不存在分区查询', max_length=32, null=True)),
                ('part_fmt', models.CharField(help_text='分区字段格式 yyyyMMdd', max_length=32, null=True)),
                ('warn_grad', models.IntegerField(default=0, help_text='告警方式0:邮件,')),
                ('is_active', models.IntegerField(default=1, help_text='是否生效')),
                ('one_off', models.BooleanField(default=False, help_text='是否是一次性任务')),
                ('task_desc', models.CharField(help_text='规则的描述', max_length=64, null=True)),
                ('create_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('update_at', models.DateTimeField(auto_now=True, help_text='创建时间')),
                ('cron_rule', models.ForeignKey(help_text='监控执行规则', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='django_celery_beat.CrontabSchedule')),
                ('term', models.ForeignKey(help_text='监控指标', on_delete=django.db.models.deletion.CASCADE, to='warehouse.MonitorRules')),
            ],
            options={
                'db_table': 'monitor_table_config',
                'ordering': ['-create_at'],
            },
        ),
        migrations.CreateModel(
            name='MonitorResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term_value', models.CharField(help_text='最新监控结果码result_code；', max_length=64, null=True)),
                ('data', models.TextField(help_text='监控查询数据结果', null=True)),
                ('is_normal', models.BooleanField(default=True, help_text='结果是否正常')),
                ('create_at', models.DateTimeField(auto_now_add=True, help_text='创建时间')),
                ('update_at', models.DateTimeField(auto_now=True, help_text='创建时间')),
                ('task', models.ForeignKey(help_text='任务id', null=True, on_delete=django.db.models.deletion.CASCADE, to='warehouse.MonitorTableConfig')),
            ],
            options={
                'db_table': 'monitor_result',
                'ordering': ['-create_at'],
            },
        ),
    ]
